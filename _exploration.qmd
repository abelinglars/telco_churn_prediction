---
title: Data Exploration for Telecom Data
format:
  html:
    code-fold: true
jupyter: python3
---

## Load libraries
```{python}
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
```


```{python}
# show all columns when printing
pd.set_option("display.max_columns", None)
# use settings that are default in pandas 3.0
pd.set_option("mode.copy_on_write", True)
```

## Load data
```{python}
data_path = "raw_data/raw_data_telco.csv"
df = pd.read_csv(data_path)
```

## Shape and info
```{python}
df.shape
df.info()
```
## Observations
- there seem to be no missing values
- the column names need to be cleaned
- 

```{python}
df.head()
```
- totalCharges is of type 'object' although it looks like it should be a float ->
missing values?

## cleaning column names first
```{python}
df.columns.values
clean_column_names = [
  "customer_id",
  "gender",
  "senior_citizen",
   "partner",
  "dependents",
  "tenure",
  "phone_service",
  "multiple_lines",
  "internet_service",
  "online_security",
  "online_backup",
  "device_protection",
  "tech_support",
  "streaming_tv",
  "streaming_movies",
  "contract",
  "paperless_billing",
  "payment_method",
  "monthly_charges",
  "total_charges",
  "churn"
]

renaming_dict = {}
for old, new in zip(df.columns.values, clean_column_names):
  renaming_dict[old] = new

df.rename(columns = renaming_dict, inplace = True)
```

```{python}
# pd.to_numeric(df["total_charges"], errors = "raise")
empty_values = df["total_charges"][df["total_charges"].isin([" ", ""])]

df.iloc[empty_values.index]

df[df['tenure'] == 0]
```
- there are empty values in 'total_charges' column
- tenure is 0 for these rows, but they have monthly charges
- these probably are new customers and the total charges have not been updated for these
- since its only 11 rows, we'll impute these values with the value of monthly charges, assuming
they paid for the first month

```{python}
df.loc[df['tenure'] == 0, 'total_charges'] = df.loc[df['tenure'] == 0, 'monthly_charges']
df['total_charges'] = pd.to_numeric(df['total_charges'], errors = "coerce")
df[df['tenure'] == 0]
```

# get rid of customer column
```{python}
len(df['customer_id'].unique())
df.drop(columns = "customer_id", inplace =True)
```

# Visualizations
## 
```{python}
def snake_to_title(snake):
  words = [word.title() for word in snake.split("_")]
  title = " ".join(words)
  return title
  
for col in df.select_dtypes(include = "number"):

  title = snake_to_title(col)

  sns.displot(df[col]).set(title = f"Distribution of {title}")
```

```{python}
px.histogram(data_frame = df, x = df["churn"])
```

# Visualize bivariate relation of churn by...
```{python}
for col in df.select_dtypes(include = "object"):
  if col in ["customer_id", "total_charges"]:
    continue
  col_repr = snake_to_title(col)
  fig = px.histogram(data_frame = df,
               x = df["churn"],
               color = df[col],
               barmode = "group",
               title = f"{col_repr} on Churn")

  fig.show()
```

```{python}
```

```{python}
```

```{python}
```

```{python}
```

```{python}
```
```{python}
```
